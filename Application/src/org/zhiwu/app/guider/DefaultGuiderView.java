/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DefaultGuiderView.java
 *
 * Created on 2010-8-3, 15:32:40
 */

package org.zhiwu.app.guider;

import java.awt.BorderLayout;
import java.awt.Window;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

import javax.swing.JDialog;

import org.zhiwu.app.AppDialog;
import org.zhiwu.app.Application;
import org.zhiwu.utils.AppLogging;

/**
 * @author  root
 */
public class DefaultGuiderView extends AppDialog {
	/**
	 * @uml.property  name="app"
	 * @uml.associationEnd  
	 */
	private final Application app;
	// private final List<GuiderContent> contents;// 当前
	private final Stack<GuiderContent> contentsStack;
	private final Map<Class<? extends GuiderContent>, GuiderContent> contentMap;// 备份
//	private final int currentViewIndex = -1;

	// private GuiderContent currentContent;

	/** Creates new form DefaultGuiderView */
	public DefaultGuiderView(Application app) {
		super(app);
		this.app = app;
		// super(app);
		initComponents();

		setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		// contents = new ArrayList<GuiderContent>();
		contentsStack = new Stack<GuiderContent>();
		contentMap = new HashMap<Class<? extends GuiderContent>, GuiderContent>();
		init();

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jToolBar1 = new javax.swing.JToolBar();
		backBtn = new javax.swing.JButton();
		nextBtn = new javax.swing.JButton();
		finishBtn = new javax.swing.JButton();
		cancleBtn = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		titleLabel = new javax.swing.JLabel();
		contentLabel = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		jPanel1.setLayout(new java.awt.BorderLayout());

		jPanel2.setLayout(new java.awt.BorderLayout());

		jToolBar1.setFloatable(false);
		jToolBar1.setRollover(true);
		jToolBar1.setAutoscrolls(true);

		backBtn.setText("back");
		backBtn.setEnabled(false);
		backBtn.setFocusable(false);
		backBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		backBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		backBtn.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				backBtnActionPerformed(evt);
			}
		});
		jToolBar1.add(backBtn);

		nextBtn.setText("next");
		nextBtn.setEnabled(false);
		nextBtn.setFocusable(false);
		nextBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		nextBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		nextBtn.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				nextBtnActionPerformed(evt);
			}
		});
		jToolBar1.add(nextBtn);

		finishBtn.setText("finish");
		finishBtn.setEnabled(false);
		finishBtn.setFocusable(false);
		finishBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		finishBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		finishBtn.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				finishBtnActionPerformed(evt);
			}
		});
		jToolBar1.add(finishBtn);

		cancleBtn.setText("cancle");
		cancleBtn.setFocusable(false);
		cancleBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		cancleBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		cancleBtn.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancleBtnActionPerformed(evt);
			}
		});
		jToolBar1.add(cancleBtn);

		jPanel2.add(jToolBar1, java.awt.BorderLayout.EAST);

		jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_END);

		jPanel3.setBackground(new java.awt.Color(255, 255, 255));
		jPanel3.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(102, 102, 102)));
		jPanel3.setPreferredSize(new java.awt.Dimension(10, 80));
		jPanel3.setLayout(new java.awt.BorderLayout());

		titleLabel.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
		titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		titleLabel.setText("title");
		titleLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
		jPanel3.add(titleLabel, java.awt.BorderLayout.PAGE_START);

		contentLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		contentLabel.setText("content");
		contentLabel.setAlignmentY(0.9F);
		jPanel3.add(contentLabel, java.awt.BorderLayout.CENTER);

		jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

		jScrollPane1.setViewportView(jPanel1);

		getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void cancleBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancleBtnActionPerformed
		setVisible(false);
	}// GEN-LAST:event_cancleBtnActionPerformed

	private void finishBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_finishBtnActionPerformed
		finish();
	}// GEN-LAST:event_finishBtnActionPerformed

	private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_nextBtnActionPerformed
		next();
	}// GEN-LAST:event_nextBtnActionPerformed

	/**
	 * @return
	 */
	private GuiderContent getExistContent(Class<? extends GuiderContent> clazz) {
		// for(int i=0;i<contents.size();i++){
		// GuiderContent c=contents.get(i);
		// if(c.getClass() == clazz){
		// return i;
		// }
		// }
		// return -1;
		return contentMap.get(clazz);
	}

	private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_backBtnActionPerformed
		back();
	}// GEN-LAST:event_backBtnActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton backBtn;
	private javax.swing.JButton cancleBtn;
	private javax.swing.JLabel contentLabel;
	private javax.swing.JButton finishBtn;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JButton nextBtn;
	private javax.swing.JLabel titleLabel;

	// End of variables declaration//GEN-END:variables

	/**
	 * @param addGuider_1
	 */
	public void setContent(Class<? extends GuiderContent> clazz) {
		try {
			backUpContents();
			GuiderContent currentContent = clazz.newInstance();
			addContent(currentContent);
		} catch (InstantiationException e) {
			AppLogging.handleException(e);
		} catch (IllegalAccessException e) {
			AppLogging.handleException(e);
		}

	}

	/**
	 * 
	 */
	private void backUpContents() {
		while (!contentsStack.empty()) {
			GuiderContent c = contentsStack.pop();
			contentMap.put(c.getClass(), c);
		}
	}

	/**
	 * @param currentContent
	 */
	private void addContent(GuiderContent currentContent) {
		currentContent.setGuider(this);
		currentContent.setApplication(app);
		// contents.add(currentContent);
		contentsStack.push(currentContent);
		currentContent.addGuiderContentListener(new GuiderContentListener() {
			@Override
			public void stateChanged(GuiderContentEvent evt) {
				String evtName = evt.getName();
				if (evtName.equals(GuiderContentEvent.NextEnable)) {
					nextBtn.setEnabled((Boolean) evt.getData());
				} else if (evtName.equals(GuiderContentEvent.FinishEnable)) {
					finishBtn.setEnabled((Boolean) evt.getData());
				}
			}

		});
	}

	/**
	 * 
	 */
	private void back() {
		GuiderContent currentContent = contentsStack.pop();
		contentMap.put(currentContent.getClass(), currentContent);

		jPanel1.remove(currentContent.getComponent());
		
		
		setContent(contentsStack.lastElement());
	}

	/**
	 * 
	 */
	private void next() {
		GuiderContent currentContent = contentsStack.lastElement();
		jPanel1.remove(currentContent.getComponent());

		Class<? extends GuiderContent> clazz = currentContent.getNext();
		if ((currentContent = getExistContent(clazz)) == null) {
			try {
				currentContent = clazz.newInstance();
				addContent(currentContent);
			} catch (InstantiationException e) {
				AppLogging.handleException(e);
			} catch (IllegalAccessException e) {
				AppLogging.handleException(e);
			}
		}else {
			contentsStack.push(currentContent);

		}
		setContent(currentContent);

		// Class clazz = contents.get(currentViewIndex).getNext();
		// {
		// if (currentViewIndex + 1 < contents.size()) {
		// if (clazz == contents.get(currentViewIndex + 1).getClass()) {
		// setContent(contents.get(currentViewIndex + 1));
		// }
		// }
		// }
		// setContent(contents.get(currentViewIndex).getNext());
		// currentViewIndex++;
	}

	public void start() {
		// setContent(0);
		// currentViewIndex =0;

		setContent(contentsStack.lastElement());
		// GuiderContent c=contents.get(currentViewIndex );
		// backBtn.setEnabled(c.canBack());
		// nextBtn.setEnabled(c.canNext());
		// finishBtn.setEnabled(c.canFinish());
		// cancleBtn.setEnabled(c.canBack());

	}

	/**
	 * Finish.
	 */
	private void finish() {
		contentsStack.lastElement().finish();
		// contents.get(currentViewIndex).finish();
	}

	/**
	 * @param i
	 */
	protected void setContent(int i) {
		// setContent(contents.get(i));
	}

	public void setContent(GuiderContent c) {// display the content
		setButton();

		// jPanel1.remove(contents.get(currentViewIndex).getComponent());
		// if(currentViewIndex !=-1){
		// jPanel1.remove(contents.get(currentViewIndex).getComponent());
		// }

		jPanel1.add(c.getComponent(), BorderLayout.CENTER);
		c.prepare();
		// if (currentViewIndex > 0) {
		// backBtn.setEnabled(true);
		// if(currentViewIndex+1 == contents.size()){
		// nextBtn.setEnabled(false);
		// }
		// }
		// currentContent=c;

		titleLabel.setText(c.getTitle());
		contentLabel.setText(c.getContentText());
		
		jPanel1.repaint();

//		if (currentViewIndex > 0) {
//			backBtn.setEnabled(false);
//		}
	}
 
	private void setButton() {
		backBtn.setEnabled(contentsStack.size()>1);
		nextBtn.setEnabled(false);
		finishBtn.setEnabled(false);
		// cancleBtn.setEnabled(false);
	}

	/**
	 * Inits the.
	 */
	private void init() {
		Window parent = app.getWindow();
		setLocation(parent.getX() + parent.getWidth() / 10, parent.getY()
				+ parent.getHeight() / 10);

		// addWindowListener(new WindowAdapter(){
		// @Override
		// public void windowClosing(WindowEvent we){
		// fireOptionSelected(CLOSE_OPTION);
		// }
		// });

		// addPropertyChangeListener(new PropertyChangeListener(){
		// public void propertyChange(PropertyChangeEvent evt) {
		// fireOptionSelected(evt);
		// }
		// });
	}


}
