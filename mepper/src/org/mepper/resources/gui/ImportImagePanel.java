/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportImageView.java
 *
 * Created on 2011-4-8, 16:53:27
 */

package org.mepper.resources.gui;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import javax.swing.Action;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;

import org.mepper.editor.map.DefaultLayer;
import org.mepper.editor.map.Map;
import org.mepper.editor.map.MapFactory;
import org.mepper.editor.map.MapOffset;
import org.mepper.editor.tile.CandidateTile;
import org.mepper.editor.tile.Tile;
import org.mepper.gui.ImageListModel;
import org.mepper.resources.ImageResource;
import org.zhiwu.app.AppManager;
import org.zhiwu.app.action.AbsAction;
import org.zhiwu.utils.AppLogging;
import org.zhiwu.utils.AppResources;
import org.zhiwu.utils.ImageUtils;

/**
 *
 * @author root
 */
public class ImportImagePanel extends javax.swing.JPanel {
	protected static final String SELECTION_CHANGED_PROPERTY = "selection.changed";
	private final AppResources r=AppManager.getResources();
	private final ImageListModel listModel;

    public ImportImagePanel() {
    	listModel = new ImageListModel();
        initComponents();
        initListeners();
    }
    
	private void initListeners() {
		jList1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if(e.getButton()==MouseEvent.BUTTON1 &&e.getClickCount()==2){
					openImage();
				}
			}
		});
		
		jList1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if(!SwingUtilities.isRightMouseButton(e)){
					return;
				}
				JPopupMenu popup= new JPopupMenu();
				
				Action deleteAction = new AbsAction("delete") {
					@Override
					public void actionPerformed(ActionEvent e) {
						int[] selectes=jList1.getSelectedIndices();
						for(int s:selectes){
							listModel.remove(s);
						}
						revalidate();
						repaint();
					}
				};
				popup.add(deleteAction);
				
				Action clearAction = new AbsAction("clear") {
					@Override
					public void actionPerformed(ActionEvent e) {
						listModel.clear();
						revalidate();
						repaint();
					}
				};
				popup.add(clearAction);
				
				popup.show(jList1, e.getX(), e.getY());
			}
		});
	}


	protected void openImage() {
		ImageResource resource=(ImageResource) listModel.getData(jList1.getSelectedIndex());
		BufferedImage image= resource.getImage();
		int width= image.getWidth(this);
		int height = image.getHeight(this);
		
		Tile tile=new CandidateTile();
		tile.setID(createID());
		tile.setName(resource.getName());
		tile.setImage(image);
		tile.setTileWidth(image.getWidth());
		tile.setTileHeight(image.getHeight());
//		tile.setTileStep(image.getWidth(), image.getHeight());
		tile.setOccupie(new Dimension(1,1));
		
		Map map=MapFactory.getDefaultMap();
		map.setName(resource.getName());
		map.setTileStep(tile.getTileWidth(), tile.getTileHeight());
		map.setLogicalSize(1, 1);
		map.setSize(width,height);
		map.addLayer(new DefaultLayer(), 0);
		 
		MapOffset offset=new MapOffset();
		offset.stepX = width;
		offset.stepY=height;
		map.setOffset(offset);
		
		map.addTile(new int[][]{{0,0}},new Tile[]{tile});
		firePropertyChange(SELECTION_CHANGED_PROPERTY, null, map);
	}

	private int createID() {
		return -1;
	}

	private ListModel getImageListModel() {
		return listModel;
	}
    
    public void open(final File[] files) {
    	Executor executor=Executors.newSingleThreadExecutor();
		executor.execute(new Runnable() {
			@Override
			public void run() {
				openFile(files);
			}
		});
	}

	private void openFile(final File[] files) {
		JProgressBar bar=new JProgressBar();
		bar.setMaximum(files.length);
		bar.setValue(1);
		jToolBar1.add(bar);
		validate();
		
		for(File f:files){ 
			bar.setValue(bar.getValue()+1);
			
			ImageResource r=new ImageResource();
			r.setName(getFileName(f.getName()));
			r.setImage(ImageUtils.readImage(f));
			listModel.add(r);
			try { 
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				AppLogging.handleException(e);
			}
		}
		jToolBar1.remove(bar);
		validate();
	}
    

	private String getFileName(String name) {
		int p=name.lastIndexOf('.');
		return name.substring(0,p);
	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jToolBar1 = new javax.swing.JToolBar();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(r.getString("tile.manager.view.tree.source")));

        jList1.setModel(getImageListModel());
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCellRenderer(listModel.getCellRenderer());
        jList1.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        jList1.setVisibleRowCount(0);
        jScrollPane1.setViewportView(jList1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jToolBar1.setRollover(true);
        add(jToolBar1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
